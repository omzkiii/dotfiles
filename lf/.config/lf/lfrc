# interpreter for shell commands

set shell zsh
# set env LS_COLORS 'rs=0:di=01;38;5;12:ln=01;38;5;14:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=38;5;12;42:st=37;44:ex=01;38;5;10:'

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

set icons 'true'

set previewer ~/.config/lf/scope-lf-wrapper.sh
set previewer ~/.config/lf/previewer
# map i $LESSOPEN='| ~/.config/lf/scope-lf-wrapper.sh %s' less -R $f
set cleaner ~/.config/lf/cleaner

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Use the `dim` attribute instead of underline for the cursor in the preview pane
# set cursorpreviewfmt "\033[7;2m"
set cursorpreviewfmt ""

# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
# map ` !true
map ` mark-load

#CUSTOM MAPS
map <backspace2> set hidden!
map <c-space> :up; toggle

cmd touch %touch "$@"
map i push :touch<space>
map sr set reverse!
map st :set sortby time; set info time; bottom



# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
# cmd open &{{
#     case $(file --mime-type -Lb $f) in
#         text/*) lf -remote "send $id \$$EDITOR \$fx";;
#         *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
#     esac
# }}

cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$vi \$fx";;
        *) for f in $fx; do xdg-open $f > /dev/null 2> /dev/null & done;;
    esac
}}
# mkdir command. See wiki if you want it to select created dir
map a :push %mkdir<space>



# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    #[ "$ans" = "y" ] && rm -rf $fx
    arr=()
    while IFS= read -r line; do
      arr+=("$line")
    done <<< "$fx"
    if [ "$ans" = "y" ]; then
      for file in ${arr[@]}; do
        echo deleting $file
        rm -rf $file
      done
    else
      echo "cancelled"
    fi
}}

# use '<delete>' key for either 'trash' or 'delete' command
map T trash
map D delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

map <a-f> :fzf_cd
cmd fzf_cd ${{
    item=$(find . -print0 | fzf --read0 --preview="tree -C {} | head -n 20")
    dir=$(dirname "$item")
    file=$(basename "$item")
    if [ -d "$item" ];then
        lf -remote "send $id cd \"$item\""
    else
        lf -remote "send $id cd \"$dir\""
        lf -remote "send $id select \"$file\""
    fi
}}

cmd yank-file $printf '%s' "$f" | xclip -i -selection clipboard
cmd yank-paths $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-dirname &printf '%s' "$PWD" | xclip -i -selection clipboard
cmd yank-basename &basename -a -- $fx | head -c-1 | xclip -i -selection clipboard
cmd yank-basename-without-extension &basename -a -- $fx | sed -E 's/\.[^.]+$//' | head -c-1 | xclip -i -selection clipboard

cmd free-space $notify-send "$(df -h ~ | tail -n 1)"
